(window.webpackJsonp=window.webpackJsonp||[]).push([[93],{591:function(e,t,a){"use strict";a.r(t);var n=a(0),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"abci"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#abci"}},[e._v("#")]),e._v(" ABCI")]),e._v(" "),a("h2",{attrs:{id:"initgenesis"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#initgenesis"}},[e._v("#")]),e._v(" InitGenesis")]),e._v(" "),a("p",[a("code",[e._v("InitGenesis")]),e._v(" initializes the EVM module genesis state by setting the "),a("code",[e._v("GenesisState")]),e._v(" fields to the\nstore. In particular it sets the parameters, configuration, accounts and transaction logs.")]),e._v(" "),a("p",[e._v("The function also performs the invariant that the EVM balance  from the "),a("code",[e._v("GenesisAccount")]),e._v(" matches the\nbalance amount from the "),a("code",[e._v("EthAccount")]),e._v(" as defined on the "),a("code",[e._v("auth")]),e._v(" module.")]),e._v(" "),a("h2",{attrs:{id:"exportgenesis"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#exportgenesis"}},[e._v("#")]),e._v(" ExportGenesis")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("ExportGenesis")]),e._v(" ABCI function exports the genesis state of the EVM module. In particular, it\nretrieves all the accounts with their bytecode, balance and storage, the transaction logs, and the\nEVM parameters and chain configuration.")]),e._v(" "),a("h2",{attrs:{id:"beginblock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#beginblock"}},[e._v("#")]),e._v(" BeginBlock")]),e._v(" "),a("p",[e._v("The EVM module "),a("code",[e._v("BeginBlock")]),e._v(" logic is executed prior to handling the state transitions from the\ntransactions. The main objective of this function is to:")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Set the block header hash mappings to the module state ("),a("code",[e._v("hash -> height")]),e._v(" and "),a("code",[e._v("height -> hash")]),e._v(").\nThis workaround is due to the fact that until the "),a("code",[e._v("v0.34.0")]),e._v(" Tendermint version it wasn't possible\nto query and subscribe to a block by hash.")])]),e._v(" "),a("li",[a("p",[e._v("Reset bloom filter and block transaction count. These variables, which are fields of the EVM\n"),a("code",[e._v("Keeper")]),e._v(", are updated on every EVM transaction.")])])]),e._v(" "),a("h2",{attrs:{id:"endblock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#endblock"}},[e._v("#")]),e._v(" EndBlock")]),e._v(" "),a("p",[e._v("The EVM module "),a("code",[e._v("EndBlock")]),e._v(" logic occurs after executing all the state transitions from the\ntransactions. The main objective of this function is to:")]),e._v(" "),a("ul",[a("li",[e._v("Update the accounts. This operation retrieves the current account and balance values for each\nstate object and updates the account represented on the stateObject with the given values. This is\ndone since the account might have been updated by transactions other than the ones defined by the\n"),a("code",[e._v("x/evm")]),e._v(" module, such as bank send or IBC transfers.")]),e._v(" "),a("li",[e._v("Commit dirty state objects and delete empty ones from the store. This operation writes the\ncontract code to the key value store in the case of contracts and updates the account's balance,\nwhich is set to the the bank module's "),a("code",[e._v("Keeper")]),e._v(".")]),e._v(" "),a("li",[e._v("Clear account cache. This clears cache of state objects to handle account changes outside of the\nEVM.")]),e._v(" "),a("li",[e._v("Store the block bloom to state. This is due for Web3 compatibility as the Ethereum headers contain\nthis type as a  field. The Ethermint RPC uses this query to construct an Ethereum Header from a\nTendermint Header.")])])])}),[],!1,null,null,null);t.default=s.exports}}]);